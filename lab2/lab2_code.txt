#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <pcap.h>

#define _CRT_SECURE_NO_WARNINGS

/*
int pcap_findalldevs_ex(
	char * source;      //指定从哪儿获取网络接口列表
	struct pcap_rmauth auth;    //用于验证，由于是本机，置为NULL
	pcap_if_t ** alldevs;       //当该函数成功返回时，alldevs指向获取的列表数组的第一个
								//列表中每一个元素都是一个pcap_if_t结构
	char * errbuf               //错误信息缓冲区
);

struct pcap_if{
	struct pcap_if *next;               //指向链表中下一个元素
	char *name;                         //代表WinPcap为该网络接口卡分配的名字
	char *description;                  //代表WinPcap对该网络接口卡的描述
	struct pcap_addr* addresses;        //addresses指向的链表中包含了这块网卡的所有IP地址
	u_int flags;                        //标识这块网卡是不是回送网卡
}

pcap_t * pcap_open(
	const char *source;             //要打开的网卡的名字
	int snaplen,
	int flags,                      //指定以何种方式打开网卡，常用的有混杂模式
	int read_timeout,               //数据包捕获函数等待一个数据包的最大时间，超时则返回0
	struct pcap_rmauth *auth,
	char *errbuf
)

int pcap_next_ex(
	pcap_t *p;//当为调用pcap_opn()成功之后返回的值，它指定了捕获哪块网卡上的数据包
	struct pcap_pkthdr ** pkt_header,//捕获该数据包的时间戳、数据包的长度等等信息
	u_char ** pkt_data//捕获到的网络数据包
)

*/

void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data);
void pprint_mac(const u_char *p);


void PrintEtherHeader(const u_char * packetData)//传入数据包
{
	typedef struct ether_header {
		u_char ether_dhost[6];    // 目标地址
		u_char ether_shost[6];    // 源地址
		u_short ether_type;       // 以太网类型
	} ether_header;

	struct ether_header * eth_protocol;
	eth_protocol = (struct ether_header *)packetData;

	u_short ether_type = ntohs(eth_protocol->ether_type);  // 以太网类型//转换字节序
	u_char *ether_src = eth_protocol->ether_shost;         // 以太网原始MAC地址//源地址
	u_char *ether_dst = eth_protocol->ether_dhost;         // 以太网目标MAC地址//目标地址

	printf("类型: 0x%x \t", ether_type);
	//printf("原mac地址：%s6", ether_src);
	printf("原MAC地址: %02X:%02X:%02X:%02X:%02X:%02X \t",
		ether_src[0], ether_src[1], ether_src[2], ether_src[3], ether_src[4], ether_src[5]);//按照mac格式打印
	printf("目标MAC地址: %02X:%02X:%02X:%02X:%02X:%02X \n",
		ether_dst[0], ether_dst[1], ether_dst[2], ether_dst[3], ether_dst[4], ether_dst[5]);
}

void MonitorAdapter(int nChoose)
{
	pcap_if_t *adapters;
	char errbuf[PCAP_ERRBUF_SIZE];

	if (pcap_findalldevs_ex(PCAP_SRC_IF_STRING, NULL, &adapters, errbuf) != -1)
	{
		// 遍历，找到指定的网卡
		for (int x = 0; x < nChoose - 1; ++x)
			adapters = adapters->next;

		char errorBuf[PCAP_ERRBUF_SIZE];

		// PCAP_OPENFLAG_PROMISCUOUS = 网卡设置为混杂模式
		// 1000 => 1000毫秒如果读不到数据直接返回超时
		pcap_t * handle = pcap_open(adapters->name, 65534, 1, PCAP_OPENFLAG_PROMISCUOUS, 0, 0);

		if (adapters == NULL)
			return;

		printf("开始侦听: %s \n", adapters->description);
		pcap_pkthdr *Packet_Header;    // 数据包头//捕获该数据包的时间戳、数据包的长度等等
		const u_char * Packet_Data;    // 数据包
		int retValue;
		while ((retValue = pcap_next_ex(handle, &Packet_Header, &Packet_Data)) >= 0)//大于0才是真正捕获到
		{
			if (retValue == 0)
				continue;
			printf("侦听长度: %d \n", Packet_Header->len);
			PrintEtherHeader(Packet_Data);
		}
	}
}


int main() {
	printf("Data Packet Capture and Analysis Experiment\n");

	pcap_if_t *alldevs;//设备链表
	pcap_if_t *d;//用于遍历
	char errbuf[PCAP_ERRBUF_SIZE];

	if (pcap_findalldevs_ex(PCAP_SRC_IF_STRING, NULL, &alldevs, errbuf) == -1) {
		fprintf(stderr, "Error in pcap_findalldevs_ex: %s\n", errbuf);
		return 1;
	}
	
	int i = 0, inum;

	// 显示所有检测到的设备
	for (d = alldevs; d != NULL; d = d->next) {
		printf("%d. %s\n", ++i, d->description);
	}

	if (i == 0) {
		printf("No interfaces found! Make sure Npcap is installed.\n");
		return 0;
	}

	//int dev_id;
	//scanf("%d",&dev_id);

	MonitorAdapter(5);//启用设备5，开始捕获数据包

	// 释放所有设备
	pcap_freealldevs(alldevs);

	return 0;
}
